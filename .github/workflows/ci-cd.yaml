name: Python Test with Minikube

on: [push, pull_request]
    
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Minikube
        uses: medyagh/setup-minikube@latest
        with:
          driver: docker

      - name: Verify minikube is running
        run: minikube status

      - name: Apply Kubernetes Secret
        run: |
          echo "Creating Kubernetes secret..."
          kubectl create secret generic jwt-secret \
            --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libsystemd-dev

      - name: Create Kubernetes Secret for MySQL
        run: |
          kubectl create secret generic mysql-secret \
            --from-literal=mysql-root-password=rootpassword \
            --from-literal=mysql-database=mydatabase \
            --from-literal=mysql-user=myuser \
            --from-literal=mysql-password=mypassword

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Python dependancies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run Python tests
        run: |
          source venv/bin/activate
          python run_tests.py

- name: Get logs from all pods
  if: always()
  run: |
    mkdir -p $GITHUB_WORKSPACE/logs
    echo "🕵️ Checking pods..."
    kubectl get pods -A

    echo "🔍 Fetching logs..."
    pods=$(kubectl get pods -o jsonpath="{.items[*].metadata.name}")
    if [ -z "$pods" ]; then
      echo "❌ No pods found."
    fi

    for pod in $pods; do
      containers=$(kubectl get pod "$pod" -o jsonpath="{.spec.containers[*].name}")
      for container in $containers; do
        log_file="$GITHUB_WORKSPACE/logs/${pod}-${container}.log"
        echo "📄 Logs from $pod (container: $container)" | tee "$log_file"
        if ! kubectl logs "$pod" -c "$container" --timestamps >> "$log_file" 2>&1; then
          echo "⚠️ Could not get current logs for $pod/$container. Trying --previous..." >> "$log_file"
          kubectl logs "$pod" -c "$container" --previous --timestamps >> "$log_file" 2>&1 || echo "❌ No logs at all." >> "$log_file"
        fi
        echo -e "\n---\n" >> "$log_file"
      done
    done

    echo "📁 Contents of logs directory:"
    ls -l $GITHUB_WORKSPACE/logs
